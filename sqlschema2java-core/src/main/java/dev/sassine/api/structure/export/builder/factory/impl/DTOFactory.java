package dev.sassine.api.structure.export.builder.factory.impl;

import static dev.sassine.api.structure.export.builder.function.ImportBeanFunction.importEntityClass;
import static dev.sassine.api.structure.export.builder.function.ImportBeanFunction.importJavaTimeAndJSONDeserialize;
import static dev.sassine.api.structure.export.builder.function.StoreClassFuncation.store;
import static java.lang.reflect.Modifier.PUBLIC;
import static org.apache.logging.log4j.LogManager.getLogger;

import java.lang.reflect.Modifier;

import org.apache.logging.log4j.Logger;
import org.burningwave.core.classes.AnnotationSourceGenerator;
import org.burningwave.core.classes.ClassSourceGenerator;
import org.burningwave.core.classes.FunctionSourceGenerator;
import org.burningwave.core.classes.TypeDeclarationSourceGenerator;
import org.burningwave.core.classes.UnitSourceGenerator;
import org.burningwave.core.classes.VariableSourceGenerator;

import com.fasterxml.jackson.annotation.JsonProperty;

import dev.sassine.api.structure.export.builder.factory.Factory;
import dev.sassine.api.structure.model.java.EntityModel;
import dev.sassine.api.structure.model.java.FieldModel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

public class DTOFactory implements Factory {

	private static final Logger log = getLogger();
	
	private static final String PACKAGE_DTO_NAME = "dto";
	private static final String METHOD_TO_ENTITY = "toEntity";
	private static final String METHOD_RETURN_ENTITY = "return entity;";
	private static final String PARAM_VALUE = "value";
	
	@Override
	public void execute(EntityModel entityModel,boolean isAutoGenerated, String nameClass, String packageName) {
		log.debug("ClassName: ({}) - PackageName: ({}) ", nameClass, packageName);
		UnitSourceGenerator gen = this.buildPackage(packageName);
		log.debug("Package builded");
		ClassSourceGenerator clDTO = this.buildClassSource(nameClass);
		log.debug("ClassDTO builded");
		importEntityClass(nameClass, packageName, gen);
		FunctionSourceGenerator fm = this.startFunctionMethod("%sEntity".formatted(nameClass));
		log.debug("Started functionMethod toEntity");
		log.debug("Prepare generate ({}) fields", entityModel.getFields().size());
		entityModel.getFields().forEach(fieldModel -> {
			VariableSourceGenerator field = this.buildField(fieldModel);
			importJavaTimeAndJSONDeserialize(field,gen, fieldModel);
			this.addFunctionToMethodFunction(fm, fieldModel);
			log.debug("Adding field in functionMethod toEntity");
			clDTO.addField(field);
			log.debug("Field ({}) builded", fieldModel.getName());
		});
		
		this.closeMethodFunction(fm);
		log.debug("Closed functionMethod toEntity");
		clDTO.addMethod(fm);
		gen.addClass(clDTO);
		store(gen);
		log.debug("ClassDTO ({}) stored", nameClass);
	}

	private void closeMethodFunction(FunctionSourceGenerator functionMethodToEntity) {
		functionMethodToEntity.addBodyCodeLine(METHOD_RETURN_ENTITY);
	}

	private void addFunctionToMethodFunction(FunctionSourceGenerator functionMethodToEntity, FieldModel fieldModel) {
		functionMethodToEntity.addBodyCodeLine("entity.set%s(this.%s);".formatted(fieldModel.getCamelNameUpper(), fieldModel.getCamelName()));
	}

	private VariableSourceGenerator buildField(FieldModel fieldModel) {
		return VariableSourceGenerator
				.create(TypeDeclarationSourceGenerator.create(fieldModel.getType()), fieldModel.getCamelName())
				.addModifier(Modifier.PRIVATE)
				.addAnnotation(AnnotationSourceGenerator.create(JsonProperty.class)
				.addParameter(PARAM_VALUE,VariableSourceGenerator.create("\"%s\"".formatted(fieldModel.getName()))));
	}

	private FunctionSourceGenerator startFunctionMethod(String nameEntityClass) {
		log.debug("Prepared EntityClassName  ({})",nameEntityClass);
		return FunctionSourceGenerator
				.create(METHOD_TO_ENTITY)
				.addModifier(PUBLIC).setReturnType(nameEntityClass)
				.addBodyCodeLine("%s entity = new %s();".formatted(nameEntityClass, nameEntityClass));
	}

	private ClassSourceGenerator buildClassSource(String nameClass) {
		return ClassSourceGenerator
				.create(TypeDeclarationSourceGenerator.create("%sDTO".formatted(nameClass)))
				.addModifier(PUBLIC).addAnnotation(AnnotationSourceGenerator.create(Getter.class))
				.addAnnotation(AnnotationSourceGenerator.create(Setter.class))
				.addAnnotation(AnnotationSourceGenerator.create(NoArgsConstructor.class));
	}

	private UnitSourceGenerator buildPackage(String packageName) {
		return UnitSourceGenerator.create("%s.%s".formatted(packageName, PACKAGE_DTO_NAME));
	}

}
