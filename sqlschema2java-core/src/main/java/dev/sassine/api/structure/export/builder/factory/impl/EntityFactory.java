package dev.sassine.api.structure.export.builder.factory.impl;

import static dev.sassine.api.structure.export.builder.function.ImportBeanFunction.importJavaTime;
import static dev.sassine.api.structure.export.builder.function.StoreClassFuncation.store;
import static dev.sassine.api.structure.type.TypeConverter.TYPE_LOCAL_DATE;
import static dev.sassine.api.structure.type.TypeConverter.TYPE_LOCAL_DATE_TIME;
import static dev.sassine.api.structure.type.TypeConverter.TYPE_LOCAL_TIME;
import static java.lang.reflect.Modifier.PRIVATE;
import static java.lang.reflect.Modifier.PUBLIC;
import static java.util.Objects.nonNull;
import static java.util.Optional.ofNullable;
import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.apache.logging.log4j.LogManager.getLogger;

import java.util.Map;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;

import org.apache.logging.log4j.Logger;
import org.burningwave.core.classes.AnnotationSourceGenerator;
import org.burningwave.core.classes.ClassSourceGenerator;
import org.burningwave.core.classes.TypeDeclarationSourceGenerator;
import org.burningwave.core.classes.UnitSourceGenerator;
import org.burningwave.core.classes.VariableSourceGenerator;
import org.hibernate.annotations.ColumnDefault;

import dev.sassine.api.structure.export.builder.factory.Factory;
import dev.sassine.api.structure.model.java.EntityModel;
import dev.sassine.api.structure.model.java.FieldModel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

public class EntityFactory implements Factory {

	private static final Logger log = getLogger();
	
	private static final String PACKAGE_DOMAIN_NAME = "domain";
	private static final String PARAM_NULLABLE = "nullable";
	private static final String PARAM_NAME = "name";
	
	Map<String, String> defaultValueLocal = Map.of(
			TYPE_LOCAL_DATE, "LocalDate.now()",
			TYPE_LOCAL_TIME, "LocalTime.now()",
			TYPE_LOCAL_DATE_TIME, "LocalDateTime.now()");

	@Override
	public void execute(EntityModel entityModel, boolean isAutoGenerated, String nameClass, String packageName) {
		log.debug("ClassName: ({}) - PackageName: ({}) ", nameClass, packageName);
		UnitSourceGenerator gen = this.buildPackage(packageName);
		log.debug("Package builded");
		ClassSourceGenerator clEntity = this.buildClassSource(entityModel, nameClass);
		log.debug("ClassEntity builded");
		log.debug("Prepare generate ({}) fields", entityModel.getFields().size());
		entityModel.getFields().forEach(fieldModel -> {
			VariableSourceGenerator field = this.buildField(fieldModel);
			importJavaTime(gen, fieldModel);
			this.setDefaultValue(field,fieldModel);
			this.generateEntityPK(isAutoGenerated, fieldModel, field, entityModel);
			log.debug("Generated EntityPK");
			clEntity.addField(field);
			log.debug("Field ({}) builded", fieldModel.getName());
		});
		gen.addClass(clEntity);
		store(gen);
		log.debug("ClassEntity ({}) stored", nameClass);
	}

	private void setDefaultValue(VariableSourceGenerator field, FieldModel fieldModel) {
		if(isNotBlank(fieldModel.getDefaultValue())) {
			var value = defaultValueLocal.get(fieldModel.getType());
			if(nonNull(value)) field.setValue(defaultValueLocal.get(fieldModel.getType()));
			field.addAnnotation(AnnotationSourceGenerator.create(ColumnDefault.class).addParameter("value",
			VariableSourceGenerator.create(stringMarks(fieldModel.getDefaultValue()))));
		}
	}

	private ClassSourceGenerator buildClassSource(EntityModel entityModel, String nameClass) {
		return ClassSourceGenerator
				.create(TypeDeclarationSourceGenerator.create("%sEntity".formatted(nameClass)))
				.addModifier(PUBLIC).addAnnotation(AnnotationSourceGenerator.create(Getter.class))
				.addAnnotation(AnnotationSourceGenerator.create(Setter.class))
				.addAnnotation(AnnotationSourceGenerator.create(NoArgsConstructor.class))
				.addAnnotation(AnnotationSourceGenerator.create(ToString.class))
				.addAnnotation(AnnotationSourceGenerator.create(Entity.class))
				.addAnnotation(AnnotationSourceGenerator.create(Table.class)
				.addParameter(PARAM_NAME,VariableSourceGenerator.create(stringMarks(entityModel.getName()))));
	}

	private UnitSourceGenerator buildPackage(String packageName) {
		return UnitSourceGenerator.create("%s.%s".formatted(packageName, PACKAGE_DOMAIN_NAME));
	}

	private VariableSourceGenerator buildField(FieldModel fieldModel) {
		return VariableSourceGenerator
				.create(TypeDeclarationSourceGenerator.create(fieldModel.getType()), fieldModel.getCamelName())
				.addModifier(PRIVATE)
				.addAnnotation(AnnotationSourceGenerator.create(Column.class)
				.addParameter(PARAM_NAME,VariableSourceGenerator.create(stringMarks(fieldModel.getName())))
				.addParameter(PARAM_NULLABLE,VariableSourceGenerator.create(String.valueOf(fieldModel.getNullable()))));
	}

	private void generateEntityPK(boolean isAutoGenerated, FieldModel fieldModel, VariableSourceGenerator field, EntityModel entityModel) {
		if (ofNullable(fieldModel.getIsPrimaryKey()).orElse(false)) {
			field.addAnnotation(AnnotationSourceGenerator.create(Id.class));
			entityModel.setPkType(fieldModel.getType());
			if (isAutoGenerated) field.addAnnotation(AnnotationSourceGenerator.create(GeneratedValue.class));
		}
	}
	
	private String stringMarks(String value) {
		return "\"%s\"".formatted(value);
	}

}
