package dev.sassine.api.structure.export.builder;

import static java.lang.String.format;
import static java.lang.System.getProperty;
import static java.util.Optional.ofNullable;

import java.lang.reflect.Modifier;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;

import org.apache.commons.text.CaseUtils;
import org.burningwave.core.classes.AnnotationSourceGenerator;
import org.burningwave.core.classes.ClassSourceGenerator;
import org.burningwave.core.classes.FunctionSourceGenerator;
import org.burningwave.core.classes.GenericSourceGenerator;
import org.burningwave.core.classes.TypeDeclarationSourceGenerator;
import org.burningwave.core.classes.UnitSourceGenerator;
import org.burningwave.core.classes.VariableSourceGenerator;
import org.springframework.stereotype.Repository;

import com.fasterxml.jackson.annotation.JsonProperty;

import dev.sassine.api.structure.model.java.EntityModel;
import dev.sassine.api.structure.model.java.FieldModel;
import dev.sassine.api.structure.type.TypeConverter;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class BuilderEntity {

	private static final String PACKAGE_DOMAIN_NAME = "domain";
	private static final String PACKAGE_DTO_NAME = "dto";
	private static final String PACKAGE_JPAREPOSITORY = "org.springframework.data.jpa.repository.JpaRepository";
	private static final String CLASSNAME_JPAREPOSITORY = "JpaRepository";
	private static final String PACKAGE_REPOSITORY_NAME = "repository";
	private static final String ENTITY_REPOSITORY = "EntityRepository";
	private static final String METHOD_TO_ENTITY = "toEntity";
	private static final String METHOD_RETURN_ENTITY = "return entity;";

	private static final String FORMAT_DTO_CLASSNAME = "%sDTO";
	private static final String FORMAT_ENTITY_CLASSNAME = "%sEntity";
	private static final String FORMAT_IMPORT_ENTITY_PACKAGE = "%s.domain.%sEntity";
	private static final String FORMAT_NEW_ENTITY_METHOD = "%s entity = new %s();";
	private static final String FORMAT_STRING_FIELDS = "\"%s\"";
	private static final String FORMAT_PACKAGE_DOT_PACKAGE = "%s.%s";
	private static final String FORMAT_SETTER_EQ_GETTER = "this.%s = entity.get%s();";

	private static final String LOCAL_DATE_TIME = "LocalDateTime";

	private static final String PARAM_NULLABLE = "nullable";
	private static final String PARAM_VALUE = "value";
	private static final String PARAM_NAME = "name";

	public void build(List<EntityModel> entityModel) {
		entityModel.forEach(e -> build(e));
	}

	private void build(EntityModel entityModel) {
		String nameClass = CaseUtils.toCamelCase(entityModel.getName(), true, '_');
		String packageName = "dev.sassine.api.structure.delete";
		boolean isAutoGenerated = true;
		String type = null;

		createEntity(entityModel, type, isAutoGenerated, nameClass, packageName);
		createDTO(entityModel, nameClass, packageName);
		createRepository(entityModel, type, nameClass, packageName);

		log.info("Sucess ;)");
	}

	private void createRepository(EntityModel entityModel, String nameClass, String packageName, String type) {

		UnitSourceGenerator gen = UnitSourceGenerator
				.create(format(FORMAT_PACKAGE_DOT_PACKAGE, packageName, PACKAGE_REPOSITORY_NAME));
		ClassSourceGenerator interfaceClass = ClassSourceGenerator
				.createInterface(TypeDeclarationSourceGenerator.create(ENTITY_REPOSITORY))
				.expands(TypeDeclarationSourceGenerator.create(CLASSNAME_JPAREPOSITORY)
						.addGeneric(GenericSourceGenerator.create(format(FORMAT_ENTITY_CLASSNAME, nameClass)))
						.addGeneric(GenericSourceGenerator.create(getIdClassType(type))))
				.addModifier(Modifier.PUBLIC).addAnnotation(AnnotationSourceGenerator.create(Repository.class));

		importEntityClass(nameClass, packageName, gen);
		gen.addImport(PACKAGE_JPAREPOSITORY);

		gen.addClass(interfaceClass);

		store(gen);
	}

	private Class<?> getIdClassType(String type) {
		if (TypeConverter.TYPE_STRING.equalsIgnoreCase(type))
			return String.class;
		else if (TypeConverter.TYPE_UUID.equalsIgnoreCase(type))
			return UUID.class;
		else if (TypeConverter.TYPE_INTEGER.equalsIgnoreCase(type))
			return Integer.class;
		else
			return Long.class;
	}

	private void createDTO(EntityModel entityModel, String nameClass, String packageName) {

		UnitSourceGenerator gen = UnitSourceGenerator
				.create(format(FORMAT_PACKAGE_DOT_PACKAGE, packageName, PACKAGE_DTO_NAME));
		ClassSourceGenerator classGen = ClassSourceGenerator
				.create(TypeDeclarationSourceGenerator.create(format(FORMAT_DTO_CLASSNAME, nameClass)))
				.addModifier(Modifier.PUBLIC).addAnnotation(AnnotationSourceGenerator.create(Getter.class))
				.addAnnotation(AnnotationSourceGenerator.create(Setter.class))
				.addAnnotation(AnnotationSourceGenerator.create(NoArgsConstructor.class));

		importEntityClass(nameClass, packageName, gen);
		String nameEntityClass = format(FORMAT_ENTITY_CLASSNAME, nameClass);
		FunctionSourceGenerator addBodyCodeLine = FunctionSourceGenerator.create(METHOD_TO_ENTITY)
				.addModifier(Modifier.PUBLIC).setReturnType(nameEntityClass)
				.addBodyCodeLine(format(FORMAT_NEW_ENTITY_METHOD, nameEntityClass, nameEntityClass));

		for (FieldModel fieldModel : entityModel.getFields()) {
			VariableSourceGenerator field = VariableSourceGenerator
					.create(TypeDeclarationSourceGenerator.create(fieldModel.getType()), fieldModel.getCamelName())
					.addModifier(Modifier.PRIVATE)
					.addAnnotation(AnnotationSourceGenerator.create(JsonProperty.class).addParameter(PARAM_VALUE,
							VariableSourceGenerator.create(format(FORMAT_STRING_FIELDS, fieldModel.getName()))));

			importLocalDateTime(gen, fieldModel);
			addBodyCodeLine.addBodyCodeLine(
					format(FORMAT_SETTER_EQ_GETTER, fieldModel.getCamelName(), fieldModel.getCamelNameUpper()));

			classGen.addField(field);
		}

		addBodyCodeLine.addBodyCodeLine(METHOD_RETURN_ENTITY);

		classGen.addMethod(addBodyCodeLine);
		gen.addClass(classGen);
		store(gen);
	}

	private void createEntity(EntityModel entityModel, String type, boolean isAutoGenerated, String nameClass,
			String packageName) {

		UnitSourceGenerator gen = UnitSourceGenerator
				.create(format(FORMAT_PACKAGE_DOT_PACKAGE, packageName, PACKAGE_DOMAIN_NAME));
		ClassSourceGenerator clEntity = ClassSourceGenerator
				.create(TypeDeclarationSourceGenerator.create(format(FORMAT_ENTITY_CLASSNAME, nameClass)))
				.addModifier(Modifier.PUBLIC).addAnnotation(AnnotationSourceGenerator.create(Getter.class))
				.addAnnotation(AnnotationSourceGenerator.create(Setter.class))
				.addAnnotation(AnnotationSourceGenerator.create(NoArgsConstructor.class))
				.addAnnotation(AnnotationSourceGenerator.create(ToString.class))
				.addAnnotation(AnnotationSourceGenerator.create(Entity.class))
				.addAnnotation(AnnotationSourceGenerator.create(Table.class)
						.addParameter(PARAM_NAME,
								VariableSourceGenerator.create(format(FORMAT_STRING_FIELDS, entityModel.getName()))));

		for (FieldModel fieldModel : entityModel.getFields()) {
			VariableSourceGenerator field = VariableSourceGenerator
					.create(TypeDeclarationSourceGenerator.create(fieldModel.getType()), fieldModel.getCamelName())
					.addModifier(Modifier.PRIVATE)
					.addAnnotation(AnnotationSourceGenerator.create(Column.class)
							.addParameter(PARAM_NAME,
									VariableSourceGenerator.create(format(FORMAT_STRING_FIELDS, fieldModel.getName())))
							.addParameter(PARAM_NULLABLE,
									VariableSourceGenerator.create(String.valueOf(fieldModel.getNullable()))));

			importLocalDateTime(gen, fieldModel);
			generateEntityPK(isAutoGenerated, fieldModel, field, type);

			clEntity.addField(field);
		}

		gen.addClass(clEntity);

		store(gen);
	}

	private void generateEntityPK(boolean isAutoGenerated, FieldModel fieldModel, VariableSourceGenerator field, String type) {
		if (ofNullable(fieldModel.getIsPrimaryKey()).orElse(false)) {
			field.addAnnotation(AnnotationSourceGenerator.create(Id.class));
			if (isAutoGenerated) field.addAnnotation(AnnotationSourceGenerator.create(GeneratedValue.class));
			type = fieldModel.getType();
		}
	}

	private void importLocalDateTime(UnitSourceGenerator gen, FieldModel fieldModel) {
		if (LOCAL_DATE_TIME.equals(fieldModel.getType()))
			gen.addImport(LocalDateTime.class);
	}

	private void store(UnitSourceGenerator gen) {
		gen.storeToClassPath(getProperty("user.dir") + "/src/main/java/");
	}

	private void importEntityClass(String nameClass, String packageName, UnitSourceGenerator gen) {
		gen.addImport(format(FORMAT_IMPORT_ENTITY_PACKAGE, packageName, nameClass));
	}

}
