package dev.sassine.api.structure.export.builder;

import static java.lang.String.format;

import java.lang.reflect.Modifier;
import java.time.LocalDateTime;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;

import org.burningwave.core.classes.AnnotationSourceGenerator;
import org.burningwave.core.classes.ClassSourceGenerator;
import org.burningwave.core.classes.FunctionSourceGenerator;
import org.burningwave.core.classes.GenericSourceGenerator;
import org.burningwave.core.classes.TypeDeclarationSourceGenerator;
import org.burningwave.core.classes.UnitSourceGenerator;
import org.burningwave.core.classes.VariableSourceGenerator;
import org.springframework.stereotype.Repository;

import com.fasterxml.jackson.annotation.JsonProperty;

import dev.sassine.api.structure.model.java.EntityModel;
import dev.sassine.api.structure.model.java.FieldModel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

public class BuilderEntity {

	private static final String PACKAGE_DOT_PACKAGE = "%s.%s";
	private static final String LOCAL_DATE_TIME = "LocalDateTime";
	private static final String PARAM_NULLABLE = "nullable";
	private static final String THIS_S_ENTITY_GET_S = "this.%s = entity.get%s();";
	private static final String PARAM_VALUE = "value";
	private static final String PARAM_NAME = "name";
	private static final String FORMATO_STRING_CAMPOS = "\"%s\"";

	public void build(List<EntityModel> entityModel) {
		entityModel.forEach(e -> build(e));
	}

	private void build(EntityModel entityModel) {
		String nameClass = entityModel.getName();
		String packageName = "dev.sassine.api.structure.delete";
		boolean isAutoGenerated = true;
		
		createEntity(entityModel,isAutoGenerated, nameClass, packageName);
		createDTO(entityModel, nameClass, packageName);
		createRepository(entityModel, nameClass, packageName);
		System.out.println("SUCESS ;) ");
	}
	
	private void createRepository(EntityModel entityModel,String nameClass,String packageName) {
		
		UnitSourceGenerator gen = UnitSourceGenerator.create(format(PACKAGE_DOT_PACKAGE,packageName,"repository"));
		ClassSourceGenerator interfaceClass = ClassSourceGenerator
				.createInterface(TypeDeclarationSourceGenerator.create(format("%sRepository",nameClass)))
				.expands(TypeDeclarationSourceGenerator.create("JpaRepository")
						.addGeneric(GenericSourceGenerator.create(format("%sEntity",nameClass)))
						.addGeneric(GenericSourceGenerator.create(Long.class)))
				.addModifier(Modifier.PUBLIC)
				.addAnnotation(AnnotationSourceGenerator.create(Repository.class));
		
		importEntityClass(nameClass, packageName, gen);
		gen.addImport("org.springframework.data.jpa.repository.JpaRepository");
		
		gen.addClass(interfaceClass);

		store(gen);
	}

	private void createDTO(EntityModel entityModel, String nameClass, String packageName) {
		
		UnitSourceGenerator gen = UnitSourceGenerator.create(format(PACKAGE_DOT_PACKAGE, packageName, "dto"));
		ClassSourceGenerator classGen = ClassSourceGenerator
				.create(TypeDeclarationSourceGenerator.create(format("%sDTO",nameClass)))
				.addModifier(Modifier.PUBLIC)
				.addAnnotation(AnnotationSourceGenerator.create(Getter.class))
				.addAnnotation(AnnotationSourceGenerator.create(Setter.class))
				.addAnnotation(AnnotationSourceGenerator.create(NoArgsConstructor.class));
		
		importEntityClass(nameClass, packageName, gen);
		String nameEntityClass = format("%sEntity",nameClass);
		FunctionSourceGenerator addBodyCodeLine = 
		FunctionSourceGenerator.create("toEntity")
         .addModifier(Modifier.PUBLIC)
         .setReturnType(nameEntityClass)
         .addBodyCodeLine(format("%s entity = new %s();", nameEntityClass, nameEntityClass));
		
		for (FieldModel fieldModel : entityModel.getFields()) {
			VariableSourceGenerator field = 
					VariableSourceGenerator
					.create(TypeDeclarationSourceGenerator.create(fieldModel.getType()), fieldModel.getCamelName())
					.addModifier(Modifier.PRIVATE)
					.addAnnotation(AnnotationSourceGenerator.create(JsonProperty.class)
					.addParameter(PARAM_VALUE, VariableSourceGenerator.create(format(FORMATO_STRING_CAMPOS, fieldModel.getName()))));
			
			importLocalDateTime(gen, fieldModel);
			
			addBodyCodeLine.addBodyCodeLine(format(THIS_S_ENTITY_GET_S ,fieldModel.getCamelName(), fieldModel.getCamelNameUpper()));
			
			classGen.addField(field);
		}
		
		addBodyCodeLine.addBodyCodeLine("return entity;");
		
		classGen.addMethod(addBodyCodeLine);
		gen.addClass(classGen);
		store(gen);
	}

	private void createEntity(EntityModel entityModel, boolean isAutoGenerated, String nameClass, String packageName) {
		
		UnitSourceGenerator gen = UnitSourceGenerator.create(format(PACKAGE_DOT_PACKAGE,packageName,"domain"));
		ClassSourceGenerator clEntity = ClassSourceGenerator
				.create(TypeDeclarationSourceGenerator.create(format("%sEntity",nameClass)))
				.addModifier(Modifier.PUBLIC)
				.addAnnotation(AnnotationSourceGenerator.create(Getter.class))
				.addAnnotation(AnnotationSourceGenerator.create(Setter.class))
				.addAnnotation(AnnotationSourceGenerator.create(NoArgsConstructor.class))
				.addAnnotation(AnnotationSourceGenerator.create(ToString.class))
				.addAnnotation(AnnotationSourceGenerator.create(Entity.class))
				.addAnnotation(AnnotationSourceGenerator.create(Table.class)
				.addParameter(PARAM_NAME, VariableSourceGenerator.create(format(FORMATO_STRING_CAMPOS, entityModel.getName()))));
		
		for (FieldModel fieldModel : entityModel.getFields()) {
			VariableSourceGenerator field = 
					VariableSourceGenerator
					.create(TypeDeclarationSourceGenerator.create(fieldModel.getType()), fieldModel.getCamelName())
					.addModifier(Modifier.PRIVATE)
					.addAnnotation(AnnotationSourceGenerator.create(Column.class)
					.addParameter(PARAM_NAME, VariableSourceGenerator.create(format(FORMATO_STRING_CAMPOS, fieldModel.getName())))
					.addParameter(PARAM_NULLABLE, VariableSourceGenerator.create(String.valueOf(fieldModel.getNullable()))));
					
			importLocalDateTime(gen, fieldModel);
			if(fieldModel.getIsPrimaryKey() != null && fieldModel.getIsPrimaryKey()) {
				field.addAnnotation(AnnotationSourceGenerator.create(Id.class));
				if(isAutoGenerated) field.addAnnotation(AnnotationSourceGenerator.create(GeneratedValue.class)); 
			}
		
			clEntity.addField(field);
		}
		
		gen.addClass(clEntity);

		store(gen);
	}

	private void importLocalDateTime(UnitSourceGenerator gen, FieldModel fieldModel) {
		if(fieldModel.getType().equals(LOCAL_DATE_TIME)) gen.addImport(LocalDateTime.class);
	}
	
	private void store(UnitSourceGenerator gen) {
		gen.storeToClassPath(System.getProperty("user.dir") + "/src/main/java/");
	}
	
	private void importEntityClass(String nameClass, String packageName, UnitSourceGenerator gen) {
		gen.addImport(format("%s.domain.%sEntity",packageName,nameClass));
	}

}
